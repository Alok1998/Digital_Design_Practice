Starting new log file Sun Sep 13 13:25:21 2020

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project MUX_2X1
Running yosys for verilog parsing and synthesis
yosys  -s MUX_2X1.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `MUX_2X1.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/alok/vsdflow/verilog/source/practiceday1.v' to AST representation.
Generating RTLIL representation for module `\MUX_2X1'.
Note: Assuming pure combinatorial block at /home/alok/vsdflow/verilog/source/practiceday1.v:5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \MUX_2X1

3.1.2. Analyzing design hierarchy..
Top module:  \MUX_2X1
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/alok/vsdflow/verilog/source/practiceday1.v:5$1 in module MUX_2X1.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\MUX_2X1.$proc$/home/alok/vsdflow/verilog/source/practiceday1.v:5$1'.
1/2: $1\out[0:0]
2/2: $0\out[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\MUX_2X1.\out' from process `\MUX_2X1.$proc$/home/alok/vsdflow/verilog/source/practiceday1.v:5$1'.

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\MUX_2X1.$proc$/home/alok/vsdflow/verilog/source/practiceday1.v:5$1'.
Removing empty process `MUX_2X1.$proc$/home/alok/vsdflow/verilog/source/practiceday1.v:5$1'.
Cleaned up 1 empty switch.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$procmux$4_CMP0' in module `MUX_2X1' with inverter.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

3.5. Executing CHECK pass (checking for obvious problems).
checking module MUX_2X1..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MUX_2X1..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$2 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \MUX_2X1.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module MUX_2X1:
created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MUX_2X1..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$2 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \MUX_2X1.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimized away 1 select inputs of $pmux cell `$procmux$2' in module `MUX_2X1'.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..
removing unused `$not' cell `$procmux$4_CMP0'.

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MUX_2X1..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$2 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \MUX_2X1.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping MUX_2X1.$procmux$2 ($mux) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\MUX_2X1' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 4 wires to a netlist network with 3 inputs and 1 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o
ABC: + map
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \MUX_2X1

3.22.2. Analyzing design hierarchy..
Top module:  \MUX_2X1
Removed 0 unused modules.

3.23. Printing statistics.

=== MUX_2X1 ===

Number of wires:                  4
Number of wire bits:              4
Number of public wires:           4
Number of public wire bits:       4
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                  1
$_MUX_                          1

3.24. Executing CHECK pass (checking for obvious problems).
checking module MUX_2X1..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
final dff cell mappings:
DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\MUX_2X1':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MUX_2X1..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \MUX_2X1.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MUX_2X1..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\MUX_2X1' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 4 wires to a netlist network with 3 inputs and 1 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.1.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:           NAND2X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        3
ABC RESULTS:          output signals:        1
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 4 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port MUX_2X1.inp_1: Missing option -inpad.
Don't map input port MUX_2X1.inp_2: Missing option -inpad.
Mapping port MUX_2X1.out using BUFX2.
Don't map input port MUX_2X1.sel: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MUX_2X1'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).


--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project MUX_2X1
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 191: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef.
LEF Read, Line 192: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 196: NOTE:  Old format VIARULE ignored.
LEF read: Processed 2941 lines.
LEF Read, Line 197: NOTE:  Old format VIARULE ignored.
LEF Read: encountered 0 errors and 20 warnings total.
LEF Read, Line 207: NOTE:  Old format VIARULE ignored.
Vertical route layer at non-minimum pitch 1.6.  Using smaller pitch 0.8, will route on 1-of-2 tracks for layer metal6.
LEF Read, Line 208: NOTE:  Old format VIARULE ignored.
Running blif2cel to generate input files for graywolf
LEF Read, Line 212: NOTE:  Old format VIARULE ignored.
blif2cel.tcl --blif /home/alok/vsdflow/verilog/synthesis/MUX_2X1.blif  --lef  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef --cel /home/alok/vsdflow/verilog/layout/MUX_2X1.cel
LEF Read, Line 213: NOTE:  Old format VIARULE ignored.
No MUX_2X1.cel1 file found for project. . . no partial blockages to apply to layout.
LEF Read, Line 223: NOTE:  Old format VIARULE ignored.
No MUX_2X1.cel2 file found for project. . . continuing without pin placement hints
LEF Read, Line 224: NOTE:  Old format VIARULE ignored.
Running GrayWolf placement
LEF Read, Line 228: NOTE:  Old format VIARULE ignored.
graywolf  MUX_2X1
LEF Read, Line 229: NOTE:  Old format VIARULE ignored.
LEF Read, Line 239: NOTE:  Old format VIARULE ignored.
LEF Read, Line 240: NOTE:  Old format VIARULE ignored.
LEF Read, Line 244: NOTE:  Old format VIARULE ignored.
LEF Read, Line 245: NOTE:  Old format VIARULE ignored.
LEF Read, Line 255: NOTE:  Old format VIARULE ignored.
LEF Read, Line 256: NOTE:  Old format VIARULE ignored.
LEF Read, Line 260: NOTE:  Old format VIARULE ignored.
LEF Read, Line 261: NOTE:  Old format VIARULE ignored.
Running getfillcell to determine cell to use for fill.
getfillcell.tcl MUX_2X1  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl MUX_2X1 FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 2.0 50.0 PG MUX_2X1  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef FILL

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project MUX_2X1
Running qrouter 1.4.59.T
qrouter -noc  -s MUX_2X1.cfg

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project MUX_2X1
Converting qrouter output to vesta delay format
Running rc2dly -r MUX_2X1.rc -l /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib -d MUX_2X1.dly
Reading Liberty timing file /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.


--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project MUX_2X1
Running magic 8.2.172
magic -dnull -noconsole  migrate_MUX_2X1.tcl

Magic 8.2 revision 172 - Compiled on Thu Aug 13 18:58:09 IST 2020.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.10(p): scaleFactor=10, multiplier=1

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project MUX_2X1
Running magic 8.2.172
magic -dnull -noconsole  /home/alok/vsdflow/verilog/layout/run_drc_MUX_2X1.tcl

Magic 8.2 revision 172 - Compiled on Thu Aug 13 18:58:09 IST 2020.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.10(p): scaleFactor=10, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Loading "/home/alok/vsdflow/verilog/layout/run_drc_MUX_2X1.tcl" from command line.
Reading LEF data from file /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read, Line 309 (Message): Defines site core (ignored)

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project MUX_2X1
Running netgen
netgen ${lvs_options} -batch lvs "${rootname}.spice ${rootname}"
"${synthdir}/${rootname}.spc ${rootname}" ${setup_script} ${outfile}
-json -blackbox
Netgen 1.5.134 compiled on Thu Aug 13 18:58:36 IST 2020
Warning: netgen command 'global' use fully-qualified name '::netgen::global'
Generating JSON file result
Treating empty subcircuits as black-box cells
Reading netlist file MUX_2X1.spice
Reading netlist file /home/alok/vsdflow/verilog/synthesis/MUX_2X1.spc
Reading setup file /usr/local/share/qflow/tech/osu018/osu018_setup.tcl
Error /usr/local/share/qflow/tech/osu018/osu018_setup.tcl:5 (ignoring), No such cell or bad file number!
Error /usr/local/share/qflow/tech/osu018/osu018_setup.tcl:6 (ignoring), No such cell or bad file number!
Warning:  There were errors reading the setup file
Comparison output logged to file comp.out
Logging to file "comp.out" enabled
Contents of circuit 1:  Circuit: 'INVX1'
Circuit INVX1 contains 0 device instances.
Circuit contains 0 nets, and 4 disconnected pins.
Contents of circuit 2:  Circuit: 'INVX1'
Circuit INVX1 contains 2 device instances.
Class: pfet                  instances:   1
Class: nfet                  instances:   1
Circuit contains 4 nets.

Circuit INVX1 contains no devices.
Contents of circuit 1:  Circuit: 'NAND2X1'
Circuit NAND2X1 contains 0 device instances.
Circuit contains 0 nets, and 5 disconnected pins.
Contents of circuit 2:  Circuit: 'NAND2X1'
Circuit NAND2X1 contains 4 device instances.
Class: pfet                  instances:   2
Class: nfet                  instances:   2
Circuit contains 6 nets.

Circuit NAND2X1 contains no devices.
Contents of circuit 1:  Circuit: 'OAI21X1'

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project MUX_2X1
Running magic 8.2.172
magic -dnull -noconsole  /home/alok/vsdflow/verilog/layout/generate_gds_MUX_2X1.tcl

Magic 8.2 revision 172 - Compiled on Thu Aug 13 18:58:09 IST 2020.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.10(p): scaleFactor=10, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Loading "/home/alok/vsdflow/verilog/layout/generate_gds_MUX_2X1.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:        0 x 0       (     0,  0    ), (     0,  0    )
Warning: Calma reading is not undoable!  I hope that's OK.
Library written using GDS-II Release 3.0
Library name: iit_stdcells
Reading "FILL".
Moving label "vdd" from space to metal1 in cell FILL.
Moving label "gnd" from space to metal1 in cell FILL.
Reading "AND2X1".
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
Moving label "Y" from space to metal1 in cell AND2X1.
Moving label "B" from space to metal1 in cell AND2X1.
Moving label "vdd" from space to metal1 in cell AND2X1.
Moving label "gnd" from space to metal1 in cell AND2X1.
Moving label "A" from space to metal1 in cell AND2X1.
Reading "AND2X2".
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
Moving label "vdd" from space to metal1 in cell AND2X2.
Moving label "gnd" from space to metal1 in cell AND2X2.
Moving label "A" from space to metal1 in cell AND2X2.
Moving label "B" from space to metal1 in cell AND2X2.
Moving label "Y" from space to metal1 in cell AND2X2.
Reading "AOI21X1".
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
Moving label "gnd" from space to metal1 in cell AOI21X1.
Moving label "vdd" from space to metal1 in cell AOI21X1.
Moving label "A" from space to metal1 in cell AOI21X1.
Moving label "B" from space to metal1 in cell AOI21X1.
Moving label "Y" from space to metal1 in cell AOI21X1.
Moving label "C" from space to metal1 in cell AOI21X1.
Reading "AOI22X1".
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
Moving label "gnd" from space to metal1 in cell AOI22X1.
Moving label "vdd" from space to metal1 in cell AOI22X1.
Moving label "C" from space to metal1 in cell AOI22X1.
Moving label "D" from space to metal1 in cell AOI22X1.
Moving label "Y" from space to metal1 in cell AOI22X1.
Moving label "A" from space to metal1 in cell AOI22X1.
Moving label "B" from space to metal1 in cell AOI22X1.
Reading "BUFX2".
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.
CIF file read warning: Input off lambda grid by 1/2; snapped to grid.

